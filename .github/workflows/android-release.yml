name: Android Build Debug AcademIA

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'android/app/build.gradle'

jobs:
  build_android:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install npm dependencies
        run: npm install

      - name: Build web app
        run: npm run build

      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli

      - name: Sync Capacitor web assets to Android
        run: npx cap sync android

      - name: Increment Android Version with Shell Script
        id: increment_version
        run: |
          GRADLE_FILE="android/app/build.gradle"
          # Utilise 'tr -d' pour enlever les espaces et s'assurer de la bonne lecture du numéro de version
          CURRENT_VERSION_CODE=$(grep "versionCode" $GRADLE_FILE | awk '{print $NF}' | tr -d ' ')
          NEW_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
          CURRENT_VERSION_NAME=$(grep "versionName" $GRADLE_FILE | cut -d\" -f2)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION_NAME"
          NEW_VERSION_NAME="$major.$minor.$((patch + 1))"
          
          # Utilise une variable pour le délimiteur 'sed' pour éviter les conflits avec des caractères spéciaux
          sed -i "s/versionCode $CURRENT_VERSION_CODE/versionCode $NEW_VERSION_CODE/" $GRADLE_FILE
          sed -i "s/versionName \"$CURRENT_VERSION_NAME\"/versionName \"$NEW_VERSION_NAME\"/" $GRADLE_FILE
          
          echo "Nouvelle version: $NEW_VERSION_NAME ($NEW_VERSION_CODE)"
          echo "version_name=$NEW_VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$NEW_VERSION_CODE" >> $GITHUB_OUTPUT

      - name: Commit version change
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add android/app/build.gradle
          git commit -m "chore: Auto. incrémentation de la version Android pour le build ${{ steps.increment_version.outputs.version_name }}"
          git push

      - name: Generate Gradle Wrapper if missing
        run: |
          if [ ! -f android/gradlew ]; then
            echo "Gradle wrapper manquant, génération..."
            cd android && gradle wrapper
            cd ..
          else
            echo "Gradle wrapper déjà présent."
          fi

      - name: Commit Gradle Wrapper if generated
        run: |
          # La vérification de 'git status' est plus fiable pour voir si des fichiers ont été ajoutés
          if git status --porcelain android/gradlew android/gradlew.bat android/gradle/wrapper | grep -q '^??'; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add android/gradlew android/gradlew.bat android/gradle/wrapper
            git commit -m "ci: Ajout automatique du gradle wrapper"
            git push
          fi

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build Android Debug APK
        run: cd android && ./gradlew assembleDebug

      - name: Find and Rename APK file
        id: find_and_rename_apk
        run: |
          APK_PATH=$(find android/app/build/outputs/apk/debug -name "*.apk" | head -n 1)
          if [ -z "$APK_PATH" ]; then
            echo "Aucun fichier APK trouvé. Le build a peut-être échoué."
            exit 1
          fi
          
          VERSION_NAME=${{ steps.increment_version.outputs.version_name }}
          NEW_APK_NAME="academia-debug-v$VERSION_NAME.apk"
          
          mv "$APK_PATH" "android/app/build/outputs/apk/debug/$NEW_APK_NAME"
          echo "APK renommé en : $NEW_APK_NAME"
          echo "apk_path=android/app/build/outputs/apk/debug/$NEW_APK_NAME" >> $GITHUB_OUTPUT

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: ${{ steps.find_and_rename_apk.outputs.apk_path }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/heads/main')
        with:
          files: ${{ steps.find_and_rename_apk.outputs.apk_path }}
          name: Release v${{ steps.increment_version.outputs.version_name }}
          tag_name: v${{ steps.increment_version.outputs.version_name }}
          body: |
            Release APK Android de DEBUG automatisée.
            Numéro de build: ${{ github.run_number }}
            Version: ${{ steps.increment_version.outputs.version_name }}
            Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
