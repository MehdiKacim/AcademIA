name: Android Build Release AcademIA

on:
  push:
    branches:
      - main # Déclenche le workflow à chaque push sur la branche 'main '

jobs:
  build_android:
    runs-on: ubuntu-latest # Exécute le job sur une machine virtuelle Ubuntu
    permissions:
      contents: write # Ajoute les permissions d'écriture pour le GITHUB_TOKEN
      pull-requests: write # Ajoute les permissions d'écriture pour les pull requests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Clone le code du dépôt

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Utilise Node.js version 20

      - name: Install npm dependencies
        run: npm install # Installe les dépendances Node.js

      - name: Build web app
        run: npm run build # Construit l'application web React (crée le dossier 'dist')

      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli # Installe l'outil CLI de Capacitor globalement

      - name: Sync Capacitor web assets to Android
        run: npx cap sync android # Copie les assets web dans le projet Android

      - name: Increment Android Version with Shell Script
        id: increment_version # ID pour accéder aux sorties
        run: |
          # Fichier à modifier
          GRADLE_FILE="android/app/build.gradle"
          
          # Lire le versionCode actuel
          CURRENT_VERSION_CODE=$(grep "versionCode" $GRADLE_FILE | awk '{print $NF}')
          
          # Calculer le nouveau versionCode
          NEW_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
          
          # Lire le versionName actuel
          CURRENT_VERSION_NAME=$(grep "versionName" $GRADLE_FILE | cut -d\" -f2)

          # Incrémenter la version patch (ex: 1.0.1 -> 1.0.2)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION_NAME"
          NEW_VERSION_NAME="$major.$minor.$((patch + 1))"
          
          # Remplacer les anciennes valeurs par les nouvelles
          sed -i "s/versionCode $CURRENT_VERSION_CODE/versionCode $NEW_VERSION_CODE/" $GRADLE_FILE
          sed -i "s/versionName \"$CURRENT_VERSION_NAME\"/versionName \"$NEW_VERSION_NAME\"/" $GRADLE_FILE
          
          # Afficher les nouvelles versions et les rendre disponibles pour les étapes suivantes
          echo "Nouvelle version: $NEW_VERSION_NAME ($NEW_VERSION_CODE)"
          echo "version_name=$NEW_VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$NEW_VERSION_CODE" >> $GITHUB_OUTPUT

      - name: Commit version change
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add android/app/build.gradle
          git commit -m "chore: Incrémentation auto. de la version Android pour le build ${{ steps.increment_version.outputs.version_name }}"
          git push

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Android Release APK
        run: cd android && ./gradlew assembleRelease

      - name: Find and Rename APK file
        id: find_and_rename_apk
        run: |
          # Trouver l'APK de release
          APK_PATH=$(find android/app/build/outputs/apk/release -name "app-release.apk" | head -n 1)
          
          # Nom de la nouvelle version
          VERSION_NAME=${{ steps.increment_version.outputs.version_name }}
          
          # Nouveau nom du fichier APK
          NEW_APK_NAME="academia-v$VERSION_NAME.apk"
          
          # Renommer le fichier
          mv "$APK_PATH" "android/app/build/outputs/apk/release/$NEW_APK_NAME"
          
          echo "APK renommé en : $NEW_APK_NAME"
          echo "apk_path=android/app/build/outputs/apk/release/$NEW_APK_NAME" >> $GITHUB_OUTPUT

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: ${{ steps.find_and_rename_apk.outputs.apk_path }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/heads/main')
        with:
          files: ${{ steps.find_and_rename_apk.outputs.apk_path }}
          name: Release v${{ steps.increment_version.outputs.version_name }}
          tag_name: v${{ steps.increment_version.outputs.version_name }}
          body: |
            Release APK Android de PRODUCTION automatisée.
            Numéro de build: ${{ github.run_number }}
            Version: ${{ steps.increment_version.outputs.version_name }}
            Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
