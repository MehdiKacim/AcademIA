name: Android Build Release AcademIA

on:
  push:
    branches:
      - main # Déclenche le workflow à chaque push sur la branche 'main '

jobs:
  build_android:
    runs-on: ubuntu-latest # Exécute le job sur une machine virtuelle Ubuntu
    permissions:
      contents: write # Ajoute les permissions d'écriture pour le GITHUB_TOKEN
      pull-requests: write # Ajoute les permissions d'écriture pour les pull requests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Clone le code du dépôt

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Utilise Node.js version 20

      - name: Install npm dependencies
        run: npm install # Installe les dépendances Node.js

      - name: Build web app
        run: npm run build # Construit l'application web React (crée le dossier 'dist')

      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli # Installe l'outil CLI de Capacitor globalement

      - name: Sync Capacitor web assets to Android
        run: npx cap sync android # Copie les assets web dans le projet Android

      - name: Increment Android Version
        id: increment_version
        uses: chkunk/increment-android-version@v1.1.0
        with:
          version-code-increment: 1
          version-name-increment: patch
          git-push-enabled: true

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Distribution Java recommandée
          java-version: '17' # Version de Java (doit correspondre à compileSdkVersion dans build.gradle)

      - name: Build Android Release APK
        run: cd android && ./gradlew assembleRelease # Modifié pour construire l'APK de release

      - name: Find and Rename APK file
        id: find_and_rename_apk
        run: |
          # Trouve l'APK de release généré
          APK_PATH=$(find android/app/build/outputs/apk/release -name "*-release.apk" | head -n 1)
          
          # Extrait le versionName du build.gradle après incrémentation
          VERSION_NAME=$(grep "versionName" android/app/build.gradle | cut -d\' -f2)
          
          # Définit le nouveau nom du fichier
          NEW_APK_NAME="academia-v$VERSION_NAME.apk"
          
          # Renomme le fichier APK
          mv "$APK_PATH" "android/app/build/outputs/apk/release/$NEW_APK_NAME"
          
          echo "APK renommé en : $NEW_APK_NAME"
          echo "apk_path=android/app/build/outputs/apk/release/$NEW_APK_NAME" >> $GITHUB_OUTPUT # Rend le chemin disponible pour les étapes suivantes

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk # Nom de l'artefact
          path: ${{ steps.find_and_rename_apk.outputs.apk_path }} # Chemin de l'APK à uploader

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/heads/main') # Crée une release uniquement si le push est sur la branche 'main'
        with:
          files: ${{ steps.find_and_rename_apk.outputs.apk_path }} # Attache l'APK à la release
          name: Release v${{ steps.find_and_rename_apk.outputs.version_name }} # Nom de la release (ex: Release v1.0.1)
          tag_name: v${{ steps.find_and_rename_apk.outputs.version_name }} # Nom du tag (ex: v1.0.1)
          body: | # Description de la release
            Release APK Android de PRODUCTION automatisée.
            Numéro de build: ${{ github.run_number }}
            Version: ${{ steps.find_and_rename_apk.outputs.version_name }}
            Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token fourni automatiquement par GitHub pour l'authentification
