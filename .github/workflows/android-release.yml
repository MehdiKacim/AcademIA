# Nom du workflow qui s'affiche sur GitHub Actions
name: Android Build Debug AcademIA

# Déclenche le workflow à chaque push sur la branche 'main'
on:
  push:
    branches:
      - main

# Un seul job nommé 'build_android'
jobs:
  build_android:
    # Le job s'exécutera sur une machine virtuelle Ubuntu
    runs-on: ubuntu-latest
    
    # Permissions requises pour le job
    permissions:
      contents: write
      pull-requests: write

    # Les étapes du job
    steps:
      # 1. Récupère le code du dépôt
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configure Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3. Installe les dépendances npm
      - name: Install npm dependencies
        run: npm install

      # 4. Compile l'application web (front-end)
      - name: Build web app
        run: npm run build

      # 5. Installe l'outil de ligne de commande Capacitor
      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli

      # 6. Synchronise les fichiers web compilés vers le projet Android
      - name: Sync Capacitor web assets to Android
        run: npx cap sync android
      
      # 7. Génère les icônes Android avec Python et Pillow
      - name: Generate Android icons with Python
        run: |
          # Affiche le répertoire de travail pour vérification
          echo "Répertoire de travail actuel : $(pwd)"
          
          # Vérifie la présence de l'image source dans le bon dossier
          if [ ! -f "public/icons/icon-512x512.png" ]; then
            echo "Erreur : Fichier d'image introuvable à public/icons/icon-512x512.png"
            exit 1
          fi
          
          # Installe Python et la bibliothèque Pillow
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install Pillow
          
          # Crée le script Python
          cat <<EOF > generate_icons.py
          from PIL import Image
          import os

          # Définir les tailles d'icônes requises par Android
          sizes = {
              "mdpi": 48,
              "hdpi": 72,
              "xhdpi": 96,
              "xxhdpi": 144,
              "xxxhdpi": 192,
          }
          
          # Le chemin de l'image est maintenant dans le sous-répertoire public/icons
          source_image_path = os.path.join(os.getcwd(), 'public', 'icons', 'icon-512x512.png')
          base_dir = os.path.join(os.getcwd(), 'android', 'app', 'src', 'main', 'res')
          
          try:
              print(f"Tentative d'ouverture de l'image : {source_image_path}")
              # Ouvre l'image source
              img = Image.open(source_image_path)
              
              # Crée les icônes pour chaque densité
              for density, size in sizes.items():
                  output_dir = os.path.join(base_dir, f'mipmap-{density}')
                  os.makedirs(output_dir, exist_ok=True)
                  
                  # Redimensionne et sauvegarde l'icône
                  resized_img = img.resize((size, size), Image.Resampling.LANCZOS)
                  resized_img.save(os.path.join(output_dir, 'ic_launcher.png'))
                  
                  print(f"Icone {density} générée avec succès.")

          except Exception as e:
              print(f"Erreur lors de la génération des icônes : {e}")
              exit(1)
          EOF
          
          # Exécute le script
          python3 generate_icons.py

      # 8. Incrémente automatiquement le numéro de version et de build Android
      - name: Increment Android Version with Shell Script
        id: increment_version
        run: |
          # Fichier à modifier
          GRADLE_FILE="android/app/build.gradle"
          
          # Lit et incrémente le versionCode
          CURRENT_VERSION_CODE=$(grep "versionCode" $GRADLE_FILE | awk '{print $NF}')
          NEW_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
          
          # Lit et incrémente le versionName (patch)
          CURRENT_VERSION_NAME=$(grep "versionName" $GRADLE_FILE | cut -d\" -f2)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION_NAME"
          NEW_VERSION_NAME="$major.$minor.$((patch + 1))"
          
          # Remplace les versions dans le fichier
          sed -i "s/versionCode $CURRENT_VERSION_CODE/versionCode $NEW_VERSION_CODE/" $GRADLE_FILE
          sed -i "s/versionName \"$CURRENT_VERSION_NAME\"/versionName \"$NEW_VERSION_NAME\"/" $GRADLE_FILE
          
          # Exporte les nouvelles versions pour les étapes suivantes
          echo "Nouvelle version: $NEW_VERSION_NAME ($NEW_VERSION_CODE)"
          echo "version_name=$NEW_VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$NEW_VERSION_CODE" >> $GITHUB_OUTPUT

      # 9. Commit et push la modification de version
      - name: Commit version change
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add android/app/build.gradle
          git add android/app/src/main/res/ # Ajoute les ressources d'icônes générées
          git commit -m "chore: Auto. incrémentation de la version Android et mise à jour de l'icône"
          git push

      # 10. Rend le script gradlew exécutable
      - name: Make gradlew executable
        run: chmod +x android/gradlew

      # 11. Configure le JDK Java nécessaire pour la compilation Android
      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 12. Compile l'APK en mode 'debug'
      - name: Build Android Debug APK
        run: cd android && ./gradlew assembleDebug

      # 13. Trouve et renomme l'APK compilé
      - name: Find and Rename APK file
        id: find_and_rename_apk
        run: |
          APK_PATH=$(find android/app/build/outputs/apk/debug -name "*.apk" | head -n 1)
          VERSION_NAME=${{ steps.increment_version.outputs.version_name }}
          NEW_APK_NAME="academia-debug-v$VERSION_NAME.apk"
          mv "$APK_PATH" "android/app/build/outputs/apk/debug/$NEW_APK_NAME"
          echo "APK renommé en : $NEW_APK_NAME"
          echo "apk_path=android/app/build/outputs/apk/debug/$NEW_APK_NAME" >> $GITHUB_OUTPUT

      # 14. Uploade l'APK renommé comme un artefact de build
      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: ${{ steps.find_and_rename_apk.outputs.apk_path }}

      # 15. Crée une nouvelle release sur GitHub
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/heads/main')
        with:
          files: ${{ steps.find_and_rename_apk.outputs.apk_path }}
          name: Release v${{ steps.increment_version.outputs.version_name }}
          tag_name: v${{ steps.increment_version.outputs.version_name }}
          body: |
            Release APK Android de DEBUG automatisée.
            Numéro de build: ${{ github.run_number }}
            Version: ${{ steps.increment_version.outputs.version_name }}
            Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
