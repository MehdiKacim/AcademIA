# Nom du workflow qui s'affiche sur GitHub Actions
name: Android Build Debug AcademIA

# Déclenche le workflow à chaque push sur la branche 'main'
on:
  push:
    branches:
      - main

# Un seul job nommé 'build_android'
jobs:
  build_android:
    # Le job s'exécutera sur une machine virtuelle Ubuntu
    runs-on: ubuntu-latest
    
    # Permissions requises pour le job (réduites car il n'y a plus de release)
    permissions:
      contents: write
      
    # Les étapes du job
    steps:
      # 1. Récupère le code du dépôt
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configure Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3. Installe les dépendances npm
      - name: Install npm dependencies
        run: npm install

      # 4. Compile l'application web (front-end)
      - name: Build web app
        run: npm run build

      # 5. Installe l'outil de ligne de commande Capacitor
      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli

      # 6. Synchronise les fichiers web compilés vers le projet Android
      - name: Sync Capacitor web assets to Android
        run: npx cap sync android

      # 7. Rend le script gradlew exécutable
      - name: Make gradlew executable
        run: chmod +x android/gradlew

      # 8. Configure le JDK Java nécessaire pour la compilation Android
      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 9. Compile l'APK en mode 'debug' (utilise la clé de débogage par défaut)
      - name: Build Android Debug APK
        run: cd android && ./gradlew assembleDebug

      # 10. Trouve et renomme l'APK compilé
      - name: Find and Rename APK file
        id: find_and_rename_apk
        run: |
          APK_PATH=$(find android/app/build/outputs/apk/debug -name "*.apk" | head -n 1)
          NEW_APK_NAME="academia-debug.apk"
          mv "$APK_PATH" "android/app/build/outputs/apk/debug/$NEW_APK_NAME"
          echo "APK renommé en : $NEW_APK_NAME"
          echo "apk_path=android/app/build/outputs/apk/debug/$NEW_APK_NAME" >> $GITHUB_OUTPUT

      # 11. Uploade l'APK renommé comme un artefact de build
      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: ${{ steps.find_and_rename_apk.outputs.apk_path }}
