# Nom du workflow qui s'affiche sur GitHub Actions
name: Android Build Debug AcademIA

# Déclenche le workflow à chaque push sur la branche 'main'
on:
  push:
    branches:
      - main
    # Empêche le workflow de se re-déclencher sur les commits automatiques
    # du bot d'incrémentation de version.
    paths-ignore:
      - 'android/app/build.gradle'

# Un seul job nommé 'build_android'
jobs:
  build_android:
    # Le job s'exécutera sur une machine virtuelle Ubuntu
    runs-on: ubuntu-latest

    # Permissions requises pour le job
    permissions:
      contents: write
      pull-requests: write

    # Les étapes du job
    steps:
      # 1. Récupère le code du dépôt
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configure Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3. Mise en cache des dépendances pnpm
      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      # 4. Installe les dépendances npm (en utilisant pnpm)
      - name: Install npm dependencies
        run: npm install --frozen-lockfile

      # 5. Compile l'application web (front-end)
      - name: Build web app
        run: npm run build

      # 6. Installe l'outil de ligne de commande Capacitor
      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli

      # 7. Synchronise les fichiers web compilés vers le projet Android
      - name: Sync Capacitor web assets to Android
        run: npx cap sync android

      # 8. Publication des mises à jour web via Capacitor Live Updates
      - name: Publish web updates
        run: ./node_modules/.bin/cap live-updates:publish Production
        env:
          CAPACITOR_LIVE_UPDATES_APP_ID: ${{ secrets.CAPACITOR_LIVE_UPDATES_APP_ID }}
          CAPACITOR_LIVE_UPDATES_TOKEN: ${{ secrets.CAPACITOR_LIVE_UPDATES_TOKEN }}

      # 9. Incrémente automatiquement le numéro de version et de build Android
      - name: Increment Android Version with Shell Script
        id: increment_version
        run: |
          # Fichier à modifier
          GRADLE_FILE="android/app/build.gradle"
          # Lit et incrémente le versionCode
          CURRENT_VERSION_CODE=$(grep "versionCode" $GRADLE_FILE | awk '{print $NF}')
          NEW_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
          # Lit et incrémente le versionName (patch)
          CURRENT_VERSION_NAME=$(grep "versionName" $GRADLE_FILE | cut -d\" -f2)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION_NAME"
          NEW_VERSION_NAME="$major.$minor.$((patch + 1))"
          # Remplace les versions dans le fichier
          sed -i "s/versionCode $CURRENT_VERSION_CODE/versionCode $NEW_VERSION_CODE/" $GRADLE_FILE
          sed -i "s/versionName \"$CURRENT_VERSION_NAME\"/versionName \"$NEW_VERSION_NAME\"/" $GRADLE_FILE
          # Exporte les nouvelles versions pour les étapes suivantes
          echo "Nouvelle version: $NEW_VERSION_NAME ($NEW_VERSION_CODE)"
          echo "version_name=$NEW_VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$NEW_VERSION_CODE" >> $GITHUB_OUTPUT

      # 10. Commit et push les modifications de version
      - name: Commit version change
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add android/app/build.gradle
          git add capacitor.hash # Ajoute le hash de la mise à jour web
          git commit -m "chore: Auto. incrémentation de la version Android et publication de mise à jour web"
          git push

      # 11. Rend le script gradlew exécutable
      - name: Make gradlew executable
        run: chmod +x android/gradlew

      # 12. Configure le JDK Java nécessaire pour la compilation Android
      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 13. Mise en cache des dépendances Gradle
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/*.gradle', 'android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 14. Compile l'APK en mode 'debug'
      - name: Build Android Debug APK
        run: cd android && ./gradlew assembleDebug

      # 15. Trouve et renomme l'APK compilé
      - name: Find and Rename APK file
        id: find_and_rename_apk
        run: |
          APK_PATH=$(find android/app/build/outputs/apk/debug -name "*.apk" | head -n 1)
          VERSION_NAME=${{ steps.increment_version.outputs.version_name }}
          NEW_APK_NAME="academia-debug-v$VERSION_NAME.apk"
          mv "$APK_PATH" "android/app/build/outputs/apk/debug/$NEW_APK_NAME"
          echo "APK renommé en : $NEW_APK_NAME"
          echo "apk_path=android/app/build/outputs/apk/debug/$NEW_APK_NAME" >> $GITHUB_OUTPUT

      # 16. Uploade l'APK renommé comme un artefact de build
      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: ${{ steps.find_and_rename_apk.outputs.apk_path }}

      # 17. Crée une nouvelle release sur GitHub
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/heads/main')
        with:
          files: ${{ steps.find_and_rename_apk.outputs.apk_path }}
          name: Release v${{ steps.increment_version.outputs.version_name }}
          tag_name: v${{ steps.increment_version.outputs.version_name }}
          body: |
            Release APK Android de DEBUG automatisée.
            Numéro de build: ${{ github.run_number }}
            Version: ${{ steps.increment_version.outputs.version_name }}
            Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}