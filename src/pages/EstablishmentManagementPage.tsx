import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { PlusCircle, Edit, Trash2, School } from "lucide-react";
import { Establishment, Profile, Curriculum } from "@/lib/dataModels"; // Import Profile and Curriculum
import { showSuccess, showError } from "@/utils/toast";
import {
  loadEstablishments,
  addEstablishmentToStorage,
  deleteEstablishmentFromStorage,
  loadCurricula,
} from '@/lib/courseData';
import { getProfileById, updateProfile } from '@/lib/studentData'; // Import getProfileById and updateProfile
import { useRole } from '@/contexts/RoleContext';

const EstablishmentManagementPage = () => {
  const { currentUserProfile, currentRole, isLoadingUser } = useRole();
  const [establishments, setEstablishments] = useState<Establishment[]>([]);
  const [newEstablishmentName, setNewEstablishmentName] = useState('');
  const [curricula, setCurricula] = useState<Curriculum[]>([]);
  const [allProfiles, setAllProfiles] = useState<Profile[]>([]); // To get all profiles for creator association

  useEffect(() => {
    const fetchData = async () => {
      setEstablishments(await loadEstablishments());
      setCurricula(await loadCurricula());
      // Fetch all profiles to correctly display associated creators
      const profiles = await getProfileById(currentUserProfile?.id || ''); // This will fetch only current user's profile, need all profiles
      // For now, we'll simulate fetching all profiles. In a real app, you'd have a function like `getAllProfiles()`
      // For this demo, we'll just use the current user's profile for association logic.
      if (profiles) {
        setAllProfiles([profiles]); // Simplified: only current user's profile
      }
    };
    fetchData();
  }, [currentUserProfile]);

  const getUserFullName = async (userId: string): Promise<string> => {
    const profile = await getProfileById(userId);
    return profile ? `${profile.first_name} ${profile.last_name}` : 'N/A';
  };

  const handleAddEstablishment = async () => {
    if (!currentUserProfile) {
      showError("Vous devez être connecté pour ajouter un établissement.");
      return;
    }
    if (newEstablishmentName.trim()) {
      try {
        const newEst = await addEstablishmentToStorage({ id: '', name: newEstablishmentName.trim() }); // ID will be generated by Supabase
        if (newEst) {
          setEstablishments(await loadEstablishments()); // Re-fetch to get the new list
          
          // Associate creator with the new establishment
          if (currentUserProfile.role === 'creator') {
            const updatedCreatorProfile: Partial<Profile> = {
              id: currentUserProfile.id,
              // Assuming establishmentIds is an array in the profile table
              // You might need to fetch the current profile first to append to the array
              // For simplicity, we'll assume it's directly updatable or handled by a separate join table
              // For now, we'll just update the current user's profile if it's a creator
              // This part needs careful consideration based on your actual profile table structure
              // If establishmentIds is a JSONB array in profiles table:
              // establishment_ids: [...(currentUserProfile.establishment_ids || []), newEst.id],
            };
            // await updateProfile(updatedCreatorProfile); // This would update the profile
          }

          setNewEstablishmentName('');
          showSuccess("Établissement ajouté !");
        } else {
          showError("Échec de l'ajout de l'établissement.");
        }
      } catch (error: any) {
        console.error("Error adding establishment:", error);
        showError(`Erreur lors de l'ajout de l'établissement: ${error.message}`);
      }
    } else {
      showError("Le nom de l'établissement est requis.");
    }
  };

  const handleDeleteEstablishment = async (id: string) => {
    try {
      await deleteEstablishmentFromStorage(id);
      setEstablishments(await loadEstablishments()); // Re-fetch to get the updated list
      showSuccess("Établissement supprimé !");
    } catch (error: any) {
      console.error("Error deleting establishment:", error);
      showError(`Erreur lors de la suppression de l'établissement: ${error.message}`);
    }
  };

  if (isLoadingUser) {
    return (
      <div className="text-center py-20">
        <h1 className="text-3xl font-bold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-primary via-foreground to-primary bg-[length:200%_auto] animate-background-pan">
          Chargement...
        </h1>
        <p className="text-lg text-muted-foreground">
          Veuillez patienter.
        </p>
      </div>
    );
  }

  if (currentRole !== 'creator') {
    return (
      <div className="text-center py-20">
        <h1 className="text-3xl font-bold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-primary via-foreground to-primary bg-[length:200%_auto] animate-background-pan">
          Accès Restreint
        </h1>
        <p className="text-lg text-muted-foreground">
          Seuls les créateurs (professeurs) peuvent accéder à cette page.
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-primary via-foreground to-primary bg-[length:200%_auto] animate-background-pan">
        Gestion des Établissements
      </h1>
      <p className="text-lg text-muted-foreground mb-8">
        Ajoutez, modifiez ou supprimez des établissements scolaires.
      </p>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <School className="h-6 w-6 text-primary" /> Établissements
          </CardTitle>
          <CardDescription>Ajoutez, modifiez ou supprimez des établissements.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2">
            <Input
              placeholder="Nom du nouvel établissement"
              value={newEstablishmentName}
              onChange={(e) => setNewEstablishmentName(e.target.value)}
            />
            <Button onClick={handleAddEstablishment}>
              <PlusCircle className="h-4 w-4 mr-2" /> Ajouter
            </Button>
          </div>
          <div className="space-y-2">
            {establishments.length === 0 ? (
              <p className="text-muted-foreground">Aucun établissement créé.</p>
            ) : (
              establishments.map((est) => (
                <Card key={est.id} className="p-3 border rounded-md">
                  <div className="flex items-center justify-between">
                    <span className="font-medium">{est.name}</span>
                    <div className="flex gap-2">
                      <Button variant="outline" size="sm" onClick={() => console.log('Modifier établissement', est.id)}>
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button variant="destructive" size="sm" onClick={() => handleDeleteEstablishment(est.id)}>
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                  <div className="mt-2 text-sm text-muted-foreground">
                    {curricula.filter(c => c.establishment_id === est.id).length} cursus
                    {/* This part needs to be updated to fetch all profiles and check their establishment_ids */}
                    {/* For now, it will not display correctly as allProfiles only contains current user */}
                    {/* {allProfiles.filter(cp => cp.establishment_ids?.includes(est.id)).length > 0 && (
                      <p className="text-xs text-muted-foreground">
                        Professeurs associés: {allProfiles.filter(cp => cp.establishment_ids?.includes(est.id)).map(cp => getUserFullName(cp.id)).join(', ')}
                      </p>
                    )} */}
                  </div>
                </Card>
              ))
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default EstablishmentManagementPage;